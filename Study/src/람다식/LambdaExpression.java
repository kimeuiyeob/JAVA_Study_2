package 람다식;

public class LambdaExpression {

	public static void main(String[] args) {
		//*(자바의 함수적 프로그래밍)(람다식)이란 결국 정의 -> 어떠한 기능을 정의하는 문법을 람다식이라고 한다. 즉 함수적 인터페이스를 정의하는거다.

		// 인터페이스 A를 implements하지 않아도 익명 이너 클래스로 구현 할수있다.
		A a = new A() {
			// 여기서 구현하면 LambdaExpression Class에다 implents A 해서 abc()메서드를 구현안해도 되서 좀더 편리하다.
			public void abc() {
				System.out.println("이게 바로 익명클래스!!");
			}
		};
		a.abc();

		// 람다식 문법을 보자!!!
		// 익명 이너 클래스랑 상당히 비슷하다.
		// 어차피 A타입에는 new A밖에 올수없으니 생략가능한 부분은 다 생략됫다고 볼수있다. 그뒤에 -> 이게 붙은거일뿐이다.
		A lambda = () -> {
			// 어차피 A를 구현하기 위해서는 abc()메서드를 재정의해야하므로 @override abc()할 필요없이 바로 이렇게 정의할수있다.
			// 이렇게 함으로써 훨씬 더 간단히 사용할수있다.
			System.out.println("이게 바로 람다식 문법!!");
		};
		lambda.abc();

		// *모든 인터페이스는 익명이너클래스로 구현할수 있을까? O
		// *그럼 모든 인터페이스는 람다식으로 구현할수 있을까? X
		// =>함수적 인터페이스만 람다식으로 구현할수있다. 함수적 인터페이스란 위같이
		// 인터페이스 안에 구현되지 않은 메서드 딱하나만 있을때 이걸 함수적 인터페이스라고한다.
		// 왜 함수적 인터페이스만 람다식으로 구현할수 있냐면 생각해보자 만약 interfaceA에 abstract메서드가 2개있다고 가정해보자
		// abc() bcd() 이러면 람다식으로 이 메서드를 재정의할때 모든걸 생략해서 구현을 바로했는데 그럼 구현을 어떤 메서드를 해야될지 모르니까 딱 하나의 abstract메서드만
		// 가진 함수적 인터페이스만 람다식으로 구현할수 있다는거다.

	}
}

interface A {
	public void abc();
}
