Stream API의 최상위 인터페이스는 BaseStream 인터페이스지만 직접 사용하는 경우는 없다.
주로 사용하는 인터페이스는 Stream인터페이스이며 BaseStream을 상속하는 인터페이스이다.
Stream 인터페이스는 여러 메소드들을 정의하고 있으며 많은 메소드들의 파라미터에 람다와 메소드 참조가 필요하다.
Stream을 구현한 객체의 주요 특징은 불변성이며 Stream을 통해 얻은 결과는 새롭게 생성된 데이터이다.

==============================================================================================

메소드 기능
	long count() => 해당 스트림에 포함된 항목의 수를 반환
	Stream concat(Stream,Stream) => 파라미터로 전달되는 두개의 스트림을 하나의 스트림으로 반환
	R collect(Collector) => 스트림의 항목들을 컬렉션 타입의 객체로 반환
	Stream filter(Predicate) => 스트림의 항목들을 파라미터의 조건에 따라 필터링하고 결과 항목들을 스트림 형태로 변환
	void forEach(Consumer) => 스트림 항목돌에 대한 순회(반복)
	Optional reduce(BinaryOperator) => 람다 표현식을 기반으로 데이터를 소모하고 그 결과를 반환(최종연산)
	Object[] toArray() => 스트림 항목들을 배열 객체로 반환
	Stream sorted() => 스트림 항목들에 대해 정렬하고 이를 스트림 형태로 변환
	
==============================================================================================

Stream 객체를 생성하는 방법은 Collection 객체를 통한 방법과 스트림 빌더를 통한 방식 두가지가 있다.
Collection 인터페이스는 stream()메소드를 default 메소드로 정의하고 있다.
이 메소드는 해당 컬렉션이 가지고 있는 항목들에 대해 스트림 처리가 가능한 Stream 객체를 반환한다.
한번 생성한 스트림은 사용후 다시 사용할 수 없으며 전체 데이터에 대한 처리가 이루어지면 종료된다.

스트림을 이용한 연산은 각 연산의 연결을 파이프라인으로 구성된다.
파이프라인을 구성할수있다는 것은 스트림 대상 데이터에 대한 다양한 연산을 조합할수 있다는것을 의미한다.
스트림을 이용한 연산 처리는 스트림 객체의 생성부터 중간연산, 최종연산 단계로 구분할수 있다.

==============================================================================================

Collection Data =====> Filter =====> Sort =====> Map =====> Collect
					    필터링          정렬      특정데이터추출   결과물 모아서 받는다.
					 <Predicate> <Comparator> <Function>	

==============================================================================================
					 
스트림의 중간연산으로는 filter, map, limit, sorted, distinct, peek, skip이 있다.
filter => 필터링 / mape => 특정갑 추출 / limit => 리밋을 주고 값을 추출 / sorted 정렬 / distinct 중복 제거 등등

중간 연산은 연속해서 호출하는 메소드 체이닝으로 구현할수있다.
최종연산이 실행되어야 중간연산이 처리되므로 중간연산들로만 구성된 매소드 체인은 실행되지 않는다.

==============================================================================================

최종 연산은 forEach, count, collect, sum, reduce 와 같은 연산으로 void를 반환하거나 컬렉션 타입을 반환한다.
중간 연산을 통해 가공된 스트림은 마지막으로 최종연산을 통해 각 요소를 소모하여 결과를 출력한다.
즉, 지연(lazy) 되었던 모든 중간 연산들이 최종연산시 모두 수행되는 것이다.
최종 연산 후에는 한번 생성해서 소모한 스트림은 닫히게 되고 재사용이 불가하다.
forEach => 스트림의 각 요소를 소비하며 람다적용 / count => 스트림 요소수를 반환(long 반환) / collect => List,Map 형태의 컬렉션 반환
sum => 스트림의 모든 요소에 대한 합을 반환 / reduce => 스트림의 요소를 하나씩 줄여가며 연산 수행후 결과 반환 (Optional 반환) 

			